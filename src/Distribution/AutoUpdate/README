
This is a library (and executables) for auto-updating the game on computers of end users.

Rationale:

If an end user (joe) starts the program, it looks on a server if there is a newer version. If there is it will be downloaded and the program itself will restart. If there isn't (or a connection to the server could not be established), the program will run normally.
If a developer (jane) uses a version, updating can be easily disabled (or even is disabled by default)


Design
======

The outermost process is a restarter script. It runs another process. If this process returns with error-code 143 (which it should do in case it updated itself) the program will be restarted. Otherwise not (It's similar to a while loop with the child process as condition and an empty body.) The restarter probably should only execute a limited number of runs to prevent infinite loops (something like 5?).

The inner process does the following:
    Look if there is a new version.
    If there is:
        Download an updater (possibly a new one)
        execute it
        exit with exit code 143
      else
        just execute the game
        make sure not to exit with exit code 143

updatable with auto-restart:
    game
    updater (download and replacing code)
updatable with requiring the user to restart:
    restarter

With this scheme the updater itself (and the updating process) can be further developed. Different stages:
    1. Just download a whole package and replace everything (look above for executable replacement)
    2. Download information about current files (with checksums? by date?) and just download and replace the changed files.

Problems and questions:

- Replacing running binaries
    I think this works everywhere when the following procedure is used:
        1. Rename the running executable (to "NAME.exe.old" or similar)
        2. Create the new NAME.exe (new version)
        3. Make sure NAME.exe.old doesn't get deleted until all existing runs have terminated.
    The next call to NAME.exe will use the new version, all existing runs will stick with the old version (That's why we need an external restarter.)

- Taking several update-steps at a time
    two strategies:
        1. Make sure, no version leaps are done. Do several updates one after another in case.
        2. Make sure, that it doesn't matter from which version we update (possibly combining an updater with an installer.)
            (This is, what we'll do.)

- Updating should be able to update (almost) everything (including the updater itself)
    Probably we can get away with not being able to update the restarter.

- How does the program know, where it is installed (portability?)
    QCoreApplication::applicationFilePath ()
        (works not reliably on Linux. (how reliable?))
    -> use FindBin

How to look for new versions?
    http://joyridelabs.de/nikki/current/$OS/version contains a string representing the current stable version. (e.g. 1.2.13)
    the executable needs to know its version

Where to find updater?
    http://joyridelabs.de/nikki/current/$OS/$VERSION/updater
    and
    http://joyridelabs.de/nikki/current/$OS/$VERSION/updater.exe

Where does the updater find files?
    http://joyridelabs.de/nikki/current/$OS/$VERSION/

    old versions have to stay available (and could be downloaded manually (with "--update-to...")

What with bought episodes?
    Bought episodes have to be updated too. Hmm. ???

How to test new updates?
    There can be developement versions in
    http://joyridelabs.de/development/nikki/$OS/
    that have to be installed with "--update-repo=development"

How does the update process work?
    1. Downloading to a temporary directory
    2. Unzipping in the temporary directory
    3. Backing up the deployed directory to a temporary directory
        (including nikki (the restarter) and core)
    4. Moving the downloaded new version in its place
    5. Moving the restarter "nikki" to another temporary directory
    6. Removing the backup
    7. Make sure the restarter gets deleted in the end.
        (How does that work while not deleting any running program?)

  when something goes wrong in 4.:
    Restore from the backup directory


overview of communication between processes:
===========================================

client to server:
http://joyridelabs.de/nikki/current/$OS/
restarter restarts if exit code of inner process is 143, otherwise not.
inner process tries an update if given "--look-for-updates".
inner process updates to specified version with "--update-to=12.3.99"
